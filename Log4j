log4j.rootLogger = TRACE, console, fileA, fileB, fileC, fileD

log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %p %c -> %m%n

log4j.appender.fileA = org.apache.log4j.FileAppender
log4j.appender.fileA.File = logs/patternA.log
log4j.appender.fileA.layout = org.apache.log4j.PatternLayout
log4j.appender.fileA.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %p %c -> %m%n

log4j.appender.fileB = org.apache.log4j.FileAppender
log4j.appender.fileB.File = logs/patternB.log
log4j.appender.fileB.layout = org.apache.log4j.PatternLayout
log4j.appender.fileB.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %p %c{3} -> %m%n

log4j.appender.fileC = org.apache.log4j.FileAppender
log4j.appender.fileC.File = logs/patternC.log
log4j.appender.fileC.layout = org.apache.log4j.PatternLayout
log4j.appender.fileC.layout.ConversionPattern = %d %p %c %C %M -> %m%n

log4j.appender.fileD = org.apache.log4j.FileAppender
log4j.appender.fileD.File = logs/patternD.log
log4j.appender.fileD.layout = org.apache.log4j.PatternLayout
log4j.appender.fileD.layout.ConversionPattern = %r %p %L %m%n8





package runner;

import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import org.openqa.selenium.remote.DesiredCapabilities;
import utils.EventHandler;

public class TestAmazon {
	public static WebDriver driver;
	public static int IMPLICIT_WAIT_TIME =10;
	public static int  PAGE_LOAD_TIME =15;
	
	Logger logger;	

 	@BeforeMethod
	public void openBrowser() throws Throwable {
		DesiredCapabilities dc = new DesiredCapabilities();
		dc.setBrowserName("chrome");

		logger = Logger.getLogger(TestAmazon.class);

		driver = new RemoteWebDriver(new URL("http://localhost:4444/"), dc);
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(IMPLICIT_WAIT_TIME));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(PAGE_LOAD_TIME));
        //get url
        WebDriverListener listener = new EventHandler();
		driver = new EventFiringDecorator<>(listener).decorate(driver);
        
    }

	@Test
	public void testcase(){
		logger.info("This is the info log");
		logger.warn("This is a warning log message");

		logger.fatal("This is a critical log message");

		logger.debug("This is a debug log message");

		logger.trace("This a trace log message");

	}
	@AfterMethod
	public void tearDown(){
		driver.quit();
	}
	
	}
